class Solution {
    public String convert(String s, int numRows) {
        String answerString = "";
        List<String> answerStringList = new ArrayList<>();
        char[] stringArray = s.toCharArray();
        int step = (numRows - 1) * 2;
        int index = 0;
        while (index < s.length()) {
            if (answerStringList.isEmpty()) {
                answerStringList.add(0, "");
            }
            String firstString = answerStringList.get(0);
            firstString += s.substring(index, index + 1);
            answerStringList.set(0, firstString);
            int endOfSubstring = index + step > s.length() ? s.length() : index + step;
            getInBetweenLetters(answerStringList, s.substring(index + 1, endOfSubstring), step);
            index += step;
        }
        for (String next: answerStringList) {
            answerString += next;
        }
        return answerString;
    }
    
    public void getInBetweenLetters(List<String> answerStringList, String s, int step) {
        char[] stringArray = s.toCharArray();
        if (step / 2 > stringArray.length) {
            answerStringList.add(1, s); 
        } else {
            int i = 0;
            String answerString = "";
            while (i < step / 2) {
                if (answerStringList.size() <= i + 2) {
                    answerStringList.add(i + 1, "");
                }
                String iString = answerStringList.get(i + 1);
                iString += s.substring(i, i + 1);
                // answerStringList.set(i + 1, iString);
                if (step - i + 1 < s.length()) {
                    // if (answerStringList.size() <= step - i + 2) {
                    //     answerStringList.add(step - i + 1, "");
                    // }
                    // String otherString = answerStringList.get(step - i + 1);
                    iString += s.substring(step - i + 1, step - i + 2);
                    // answerStringList.set(step - i + 1, otherString);
                    // answerString += stringArray[step - i];
                }
                answerStringList.set(i + 1, iString);
                i++;
            }
            // return answerString;
        }
    }
}